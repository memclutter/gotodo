version: '3.8'
volumes:
  db_data:
    driver: local
  ingress_storage:
    driver: local
networks:
  ingress:
    name: gotodo_ingress
    driver: bridge
  backend:
    name: gotodo_backend
    driver: bridge
services:
  ingress:
    image: traefik:v2.4.2
    expose:
      - 80
      - 8080
    networks:
      - ingress
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "ingress_storage:/storage/"
    labels:
      - "traefik.enable=true"
      # Strip path prefix /api
      - "traefik.http.middlewares.stripprefix-api.stripprefix.prefixes=/api"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.network=gotodo_ingress"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
  spa:
    image: 'github.com/memclutter/gotodo/spa'
    build:
      context: ../../web/spa/
      dockerfile: ../../build/package/spa/Dockerfile
    expose:
      - 3000
    networks:
      - ingress
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.spa.rule=Host(`${DOMAIN}`)"
  api:
    image: 'github.com/memclutter/gotodo/api'
    build:
      context: ../../
      dockerfile: build/package/api/Dockerfile
    expose:
      - 8000
    networks:
      - ingress
      - backend
    environment:
      DSN_DB: 'postgresql://gotodo:gotodo@db:5432/gotodo?sslmode=disable'
      DSN_MAIL: '${DSN_MAIL}'
      DEFAULT_FROM_MAIL: '${DEFAULT_FROM_MAIL}'
      URL_BASE: 'http://${DOMAIN}'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.middlewares=stripprefix-api@docker"
    command: "api"
  db-migrate:
    image: 'github.com/memclutter/gotodo/api'
    build:
      context: ../../
      dockerfile: build/package/api/Dockerfile
    networks:
      - backend
    environment:
      DSN_DB: 'postgresql://gotodo:gotodo@db:5432/gotodo?sslmode=disable'
    volumes:
      - "../../migrations/:/var/app/migrations"
    entrypoint: '/bin/sh -c "dockerize -wait tcp://db:5432 /go/bin/migrate -path /var/app/migrations -database $${DSN_DB} up"'
  db:
    image: 'bitnami/postgresql:14.2.0-debian-10-r42'
    expose:
      - 5432
    networks:
      - backend
    volumes:
      - "db_data:/bitnami/postgresql"
    environment:
      BITNAMI_DEBUG: 'yes'
      ALLOW_EMPTY_PASSWORD: 'no'
      POSTGRESQL_USERNAME: 'gotodo'
      POSTGRESQL_PASSWORD: 'gotodo'
      POSTGRESQL_DATABASE: 'gotodo'
